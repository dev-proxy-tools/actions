name: Test Dev Proxy Caching

on:
  workflow_dispatch:

jobs:
  test-cache-functionality:
    name: Test Cache Functionality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: First run - should install and cache
        id: first-run
        uses: ./setup
        with:
          version: v0.29.2
          auto-start: false
          enable-cache: true

      - name: Verify first installation
        run: |
          echo "üîç Verifying first installation..."
          if [ -f "./devproxy/devproxy" ]; then
            echo "‚úÖ Dev Proxy binary found after first run"
            version_output=$(./devproxy/devproxy --version 2>&1)
            echo "üìã Version: $version_output"
            if echo "$version_output" | grep -q "0.29.2"; then
              echo "‚úÖ Correct version installed"
            else
              echo "‚ùå Version mismatch"
              exit 1
            fi
          else
            echo "‚ùå Dev Proxy binary not found"
            exit 1
          fi

      - name: Second run - should use cache
        id: second-run
        uses: ./setup
        with:
          version: v0.29.2
          auto-start: false
          enable-cache: true

      - name: Verify second installation (from cache)
        run: |
          echo "üîç Verifying second installation..."
          if [ -f "./devproxy/devproxy" ]; then
            echo "‚úÖ Dev Proxy binary found after second run"
            version_output=$(./devproxy/devproxy --version 2>&1)
            echo "üìã Version: $version_output"
            if echo "$version_output" | grep -q "0.29.2"; then
              echo "‚úÖ Correct version available from cache"
            else
              echo "‚ùå Version mismatch"
              exit 1
            fi
          else
            echo "‚ùå Dev Proxy binary not found"
            exit 1
          fi

  test-cache-disabled:
    name: Test Cache Disabled
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup with cache disabled
        id: no-cache
        uses: ./setup
        with:
          version: v0.29.2
          auto-start: false
          enable-cache: false

      - name: Verify installation without cache
        run: |
          echo "üîç Verifying installation without cache..."
          if [ -f "./devproxy/devproxy" ]; then
            echo "‚úÖ Dev Proxy binary found"
            version_output=$(./devproxy/devproxy --version 2>&1)
            echo "üìã Version: $version_output"
            if echo "$version_output" | grep -q "0.29.2"; then
              echo "‚úÖ Correct version installed"
            else
              echo "‚ùå Version mismatch"
              exit 1
            fi
          else
            echo "‚ùå Dev Proxy binary not found"
            exit 1
          fi

  test-cache-with-start:
    name: Test Cache with Auto-Start
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup with cache and auto-start
        id: cache-start
        uses: ./setup
        with:
          version: v0.29.2
          auto-start: true
          enable-cache: true

      - name: Verify installation and startup
        run: |
          echo "üîç Verifying installation and startup..."
          if [ -f "./devproxy/devproxy" ]; then
            echo "‚úÖ Dev Proxy binary found"
          else
            echo "‚ùå Dev Proxy binary not found"
            exit 1
          fi

          # Verify outputs are set (indicating startup succeeded)
          if [ -n "${{ steps.cache-start.outputs.proxy-url }}" ]; then
            echo "‚úÖ Proxy URL output: ${{ steps.cache-start.outputs.proxy-url }}"
          else
            echo "‚ùå Proxy URL output not set"
            exit 1
          fi

          if [ -n "${{ steps.cache-start.outputs.api-url }}" ]; then
            echo "‚úÖ API URL output: ${{ steps.cache-start.outputs.api-url }}"
          else
            echo "‚ùå API URL output not set"
            exit 1
          fi

          # Check if Dev Proxy is running
          response=$(curl -s --max-time 10 ${{ steps.cache-start.outputs.api-url }})
          if [ $? -eq 0 ] && [ -n "$response" ]; then
            echo "‚úÖ Dev Proxy is running and responsive"
            echo "üìã API Response: $response"
          else
            echo "‚ùå Dev Proxy is not responsive"
            exit 1
          fi

      - name: Show logs
        if: always()
        run: |
          echo "Dev Proxy logs:"
          if [ -f "devproxy.log" ]; then
            cat devproxy.log
          else
            echo "No log file found"
          fi