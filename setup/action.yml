name: Setup Dev Proxy
description: >
  Setup Dev Proxy with optional version specification and start configuration
inputs:
  version:
    description: Version of Dev Proxy to install (e.g., v0.29.2). If not specified, the latest version will be installed.
    required: false
  auto-start:
    description: Start Dev Proxy after installation
    required: false
    default: "true"
  auto-record:
    description: Automatically start recording after setup (only used when start is true)
    required: false
    default: "false"
  log-file:
    description: The file to log Dev Proxy output to (only used when start is true)
    required: false
    default: devproxy.log
  config-file:
    description: The path to the Dev Proxy configuration file (only used when start is true)
    required: false
  auto-stop:
    description: Automatically stop Dev Proxy when workflow completes (only used when start is true)
    required: false
    default: "true"
  report-job-summary:
    description: Path to write job summary with Dev Proxy reports (e.g., $GITHUB_STEP_SUMMARY). If not provided, no summary is created.
    required: false
  enable-cache:
    description: Enable caching of Dev Proxy installation to speed up subsequent runs
    required: false
    default: "true"
outputs:
  proxy-url:
    description: The URL of the running Dev Proxy instance (only set when start is true)
    value: ${{ steps.start-conditional.outputs.proxy-url }}
  api-url:
    description: The URL of the Dev Proxy API (only set when start is true)
    value: ${{ steps.start-conditional.outputs.api-url }}
runs:
  using: composite
  steps:
    - name: Determine cache key
      id: cache-key
      run: |
        # If version is specified, use it directly
        if [ -n "${{ inputs.version }}" ]; then
          cache_version="${{ inputs.version }}"
          echo "cache-key=devproxy-$cache_version-${{ runner.os }}" >> $GITHUB_OUTPUT
          echo "version=$cache_version" >> $GITHUB_OUTPUT
          echo "ðŸ“‹ Cache key: devproxy-$cache_version-${{ runner.os }}"
        else
          # For latest version, we need to install first to get the actual version
          echo "cache-key=devproxy-temp-${{ runner.os }}" >> $GITHUB_OUTPUT
          echo "version=latest" >> $GITHUB_OUTPUT
          echo "ðŸ“‹ Temporary cache key: devproxy-temp-${{ runner.os }}"
        fi
      shell: bash

    - name: Cache Dev Proxy installation
      if: ${{ inputs.enable-cache == 'true' && inputs.version != '' }}
      id: cache-devproxy
      uses: actions/cache@v4
      with:
        path: |
          ./devproxy/
          ./devproxy-beta/
        key: ${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          devproxy-${{ steps.cache-key.outputs.version }}-

    - name: Install Dev Proxy for version detection
      id: install-for-version
      if: ${{ inputs.version == '' }}
      uses: dev-proxy-tools/actions/install@v1
      with:
        called-by-setup: true
        version: ${{ inputs.version }}

    - name: Get actual version and create proper cache key
      id: actual-cache-key
      if: ${{ inputs.version == '' }}
      run: |
        # Determine binary path based on installed version
        if [ -f "./devproxy-beta/devproxy-beta" ]; then
          binary_path="./devproxy-beta/devproxy-beta"
        else
          binary_path="./devproxy/devproxy"
        fi
        
        # Get actual version from binary
        actual_version=$($binary_path --version | head -1 | awk '{print $2}')
        echo "ðŸ“‹ Detected version: $actual_version"
        
        # Create proper cache key with actual version
        cache_key="devproxy-v$actual_version-${{ runner.os }}"
        echo "cache-key=$cache_key" >> $GITHUB_OUTPUT
        echo "version=v$actual_version" >> $GITHUB_OUTPUT
        echo "ðŸ“‹ Final cache key: $cache_key"
      shell: bash

    - name: Cache Dev Proxy installation with actual version
      if: ${{ inputs.enable-cache == 'true' && inputs.version == '' }}
      id: cache-devproxy-actual
      uses: actions/cache@v4
      with:
        path: |
          ./devproxy/
          ./devproxy-beta/
        key: ${{ steps.actual-cache-key.outputs.cache-key }}
        restore-keys: |
          devproxy-${{ steps.actual-cache-key.outputs.version }}-

    - name: Install Dev Proxy
      id: install
      if: ${{ inputs.enable-cache == 'false' || (inputs.version != '' && steps.cache-devproxy.outputs.cache-hit != 'true') }}
      uses: dev-proxy-tools/actions/install@v1
      with:
        called-by-setup: true
        version: ${{ inputs.version }}



    - name: Start Dev Proxy (conditional)
      id: start-conditional
      if: ${{ inputs.auto-start == 'true' }}
      uses: pyTooling/Actions/with-post-step@v5.1.0
      with:
        main: |
          # Make script executable
          chmod +x ${{ github.action_path }}/../scripts/start-devproxy.sh

          # Call the start script
          start_script="${{ github.action_path }}/../scripts/start-devproxy.sh"
          $start_script "${{ inputs.log-file }}" "${{ inputs.config-file }}"
        post: |
          # Make script executable
          chmod +x ${{ github.action_path }}/../scripts/stop-devproxy.sh

          # Call the stop script
          ${{ github.action_path }}/../scripts/stop-devproxy.sh "${{ inputs.auto-stop }}"

          # Generate job summary if requested
          if [ -n "${{ inputs.report-job-summary }}" ]; then
            # Make script executable
            chmod +x ${{ github.action_path }}/../scripts/generate-job-summary.sh

            # Call the job summary script
            script_path="${{ github.action_path }}/../scripts/generate-job-summary.sh"
            $script_path "${{ inputs.report-job-summary }}"
          fi

    - name: Start recording (conditional)
      if: ${{ inputs.auto-start == 'true' && inputs.auto-record == 'true' }}
      uses: dev-proxy-tools/actions/record-start@v1
