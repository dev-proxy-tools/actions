name: Install Dev Proxy
description: Install Dev Proxy with optional version specification and automatic startup
inputs:
  version:
    description: Version of Dev Proxy to install (e.g., v0.29.2). If not specified, the latest version will be installed.
    required: false
  start-proxy:
    description: Automatically start Dev Proxy after installation
    required: false
    default: "false"
  start-recording:
    description: Automatically start recording after starting Dev Proxy (implies start-proxy=true)
    required: false
    default: "false"
  log-file:
    description: The file to log Dev Proxy output to (used when start-proxy=true)
    required: false
    default: devproxy.log
  config-file:
    description: The path to the Dev Proxy configuration file (used when start-proxy=true)
    required: false
  auto-stop:
    description: Automatically stop Dev Proxy when workflow completes (used when start-proxy=true)
    required: false
    default: "true"
runs:
  using: "composite"
  steps:
    - name: Install Dev Proxy
      id: install
      run: |
        echo "🔧 Installing Dev Proxy..."

        # Check if version contains beta
        is_beta=false
        if [ -n "${{ inputs.version }}" ] && echo "${{ inputs.version }}" | grep -q "\-beta"; then
          is_beta=true
          echo "DEVPROXY_BETA=true" >> $GITHUB_ENV
        fi

        # Construct the installation command
        if [ -n "${{ inputs.version }}" ]; then
          if [ "$is_beta" = true ]; then
            echo "📋 Installing Dev Proxy beta version: ${{ inputs.version }}"
            bash -c "$(curl -sL https://aka.ms/devproxy/setup-beta.sh)" -- "${{ inputs.version }}"
          else
            echo "📋 Installing Dev Proxy version: ${{ inputs.version }}"
            bash -c "$(curl -sL https://aka.ms/devproxy/setup.sh)" -- "${{ inputs.version }}"
          fi
        else
          echo "📋 Installing latest version of Dev Proxy"
          bash -c "$(curl -sL https://aka.ms/devproxy/setup.sh)"
        fi

        echo "✅ Dev Proxy installed successfully!"
      shell: bash

    - name: Start Dev Proxy if requested
      id: start-proxy
      if: ${{ inputs.start-proxy == 'true' || inputs.start-recording == 'true' }}
      uses: pyTooling/Actions/with-post-step@v5.1.0
      with:
        main: |
          log_file="${{ inputs.log-file }}"

          echo "Starting Dev Proxy..."

          # Create directory for Dev Proxy configuration and certificates
    
          root_cert_dir="$HOME/.config/dev-proxy"
          mkdir -p "$root_cert_dir"

          # Set certificate path
          cert_path="$root_cert_dir/rootCert.pfx"

          echo "Using certificate path: $cert_path"

          # Set environment variables for Dev Proxy
          export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
                   
          # Set config arguments if provided
          config_arg=""
          if [ -n "${{ inputs.config-file }}" ]; then
            config_arg="-c ${{ inputs.config-file }}"
          fi

          # Use appropriate executable based on whether beta version was installed
          devproxy_exec="./devproxy/devproxy"
          if [ "$DEVPROXY_BETA" = "true" ]; then
            devproxy_exec="./devproxy-beta/devproxy-beta"
          fi

          # start Dev Proxy in the background
          # log Dev Proxy output to the log file
          # log stdout and stderr to the file
          $devproxy_exec $config_arg > $log_file 2>&1 &

          # wait for init
          echo "Waiting for Dev Proxy to start..."
          while true; do
            if grep -q "Configure your operating system to use this proxy's port and address 127.0.0.1:8000" $log_file; then
              break
            fi
            sleep 1
          done

          echo "🔒 Trusting Dev Proxy certificate..."

          echo "Checking for certificate at: $cert_path"
          if [ -f "$cert_path" ]; then
            echo "✅ Certificate found"
            
            echo "Exporting the Dev Proxy's Root Certificate"
            if openssl pkcs12 -in "$cert_path" -clcerts -nokeys -out dev-proxy-ca.crt -passin pass:""; then
              echo "Installing the Dev Proxy's Root Certificate"
              sudo cp dev-proxy-ca.crt /usr/local/share/ca-certificates/

              echo "Updating the CA certificates"
              sudo update-ca-certificates
              
              # Set the system proxy settings
              echo "http_proxy=http://127.0.0.1:8000" >> $GITHUB_ENV
              echo "https_proxy=http://127.0.0.1:8000" >> $GITHUB_ENV
                    
              echo "✅ Dev Proxy certificate trusted successfully!"
            else
              echo "❌ Failed to export certificate from $cert_path"
              echo "⚠️ SSL verification may fail"
            fi
          else
            echo "❌ Certificate not found at: $cert_path"
            echo "⚠️ Skipping certificate trust - SSL verification may fail"
          fi
        post: |
          if [ "${{ inputs.auto-stop }}" = "true" ]; then
            echo "Stopping Dev Proxy..."
            curl -X POST http://127.0.0.1:8897/proxy/stopproxy
            echo "http_proxy=" >> $GITHUB_ENV
            echo "https_proxy=" >> $GITHUB_ENV
            echo "Dev Proxy has been stopped."
          fi

    - name: Start recording if requested
      id: start-recording
      if: ${{ inputs.start-recording == 'true' }}
      run: |
        echo "Starting Dev Proxy recording..."
        curl -X POST http://127.0.0.1:8897/proxy \
          -H "Content-Type: application/json" \
          -d '{"recording": true}'
        echo "✅ Dev Proxy recording started!"
      shell: bash